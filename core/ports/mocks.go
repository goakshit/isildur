// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/goakshit/isildur/core/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockProductsRepository is a mock of ProductsRepository interface.
type MockProductsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductsRepositoryMockRecorder
}

// MockProductsRepositoryMockRecorder is the mock recorder for MockProductsRepository.
type MockProductsRepositoryMockRecorder struct {
	mock *MockProductsRepository
}

// NewMockProductsRepository creates a new mock instance.
func NewMockProductsRepository(ctrl *gomock.Controller) *MockProductsRepository {
	mock := &MockProductsRepository{ctrl: ctrl}
	mock.recorder = &MockProductsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsRepository) EXPECT() *MockProductsRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockProductsRepository) GetAll(ctx context.Context) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProductsRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProductsRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockProductsRepository) GetByID(ctx context.Context, id uuid.UUID) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProductsRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProductsRepository)(nil).GetByID), ctx, id)
}

// MockSubscriptionsRepository is a mock of SubscriptionsRepository interface.
type MockSubscriptionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionsRepositoryMockRecorder
}

// MockSubscriptionsRepositoryMockRecorder is the mock recorder for MockSubscriptionsRepository.
type MockSubscriptionsRepositoryMockRecorder struct {
	mock *MockSubscriptionsRepository
}

// NewMockSubscriptionsRepository creates a new mock instance.
func NewMockSubscriptionsRepository(ctrl *gomock.Controller) *MockSubscriptionsRepository {
	mock := &MockSubscriptionsRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionsRepository) EXPECT() *MockSubscriptionsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubscriptionsRepository) Create(ctx context.Context, sub domain.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubscriptionsRepositoryMockRecorder) Create(ctx, sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubscriptionsRepository)(nil).Create), ctx, sub)
}

// GetByID mocks base method.
func (m *MockSubscriptionsRepository) GetByID(ctx context.Context, id uuid.UUID) (domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSubscriptionsRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSubscriptionsRepository)(nil).GetByID), ctx, id)
}

// Patch mocks base method.
func (m *MockSubscriptionsRepository) Patch(ctx context.Context, id uuid.UUID, update map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, id, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockSubscriptionsRepositoryMockRecorder) Patch(ctx, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockSubscriptionsRepository)(nil).Patch), ctx, id, update)
}

// MockSubscriptionService is a mock of SubscriptionService interface.
type MockSubscriptionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionServiceMockRecorder
}

// MockSubscriptionServiceMockRecorder is the mock recorder for MockSubscriptionService.
type MockSubscriptionServiceMockRecorder struct {
	mock *MockSubscriptionService
}

// NewMockSubscriptionService creates a new mock instance.
func NewMockSubscriptionService(ctrl *gomock.Controller) *MockSubscriptionService {
	mock := &MockSubscriptionService{ctrl: ctrl}
	mock.recorder = &MockSubscriptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionService) EXPECT() *MockSubscriptionServiceMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockSubscriptionService) CreateSubscription(ctx context.Context, pID uuid.UUID, durationInMonths int8, startDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, pID, durationInMonths, startDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockSubscriptionServiceMockRecorder) CreateSubscription(ctx, pID, durationInMonths, startDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockSubscriptionService)(nil).CreateSubscription), ctx, pID, durationInMonths, startDate)
}

// FetchSubscription mocks base method.
func (m *MockSubscriptionService) FetchSubscription(ctx context.Context, id uuid.UUID) (domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSubscription", ctx, id)
	ret0, _ := ret[0].(domain.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSubscription indicates an expected call of FetchSubscription.
func (mr *MockSubscriptionServiceMockRecorder) FetchSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSubscription", reflect.TypeOf((*MockSubscriptionService)(nil).FetchSubscription), ctx, id)
}

// UpdateSubscriptionStatus mocks base method.
func (m *MockSubscriptionService) UpdateSubscriptionStatus(ctx context.Context, id uuid.UUID, status domain.SubscriptionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscriptionStatus indicates an expected call of UpdateSubscriptionStatus.
func (mr *MockSubscriptionServiceMockRecorder) UpdateSubscriptionStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionStatus", reflect.TypeOf((*MockSubscriptionService)(nil).UpdateSubscriptionStatus), ctx, id, status)
}

// MockProductsService is a mock of ProductsService interface.
type MockProductsService struct {
	ctrl     *gomock.Controller
	recorder *MockProductsServiceMockRecorder
}

// MockProductsServiceMockRecorder is the mock recorder for MockProductsService.
type MockProductsServiceMockRecorder struct {
	mock *MockProductsService
}

// NewMockProductsService creates a new mock instance.
func NewMockProductsService(ctrl *gomock.Controller) *MockProductsService {
	mock := &MockProductsService{ctrl: ctrl}
	mock.recorder = &MockProductsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsService) EXPECT() *MockProductsServiceMockRecorder {
	return m.recorder
}

// FetchAllProducts mocks base method.
func (m *MockProductsService) FetchAllProducts(ctx context.Context) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProducts", ctx)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllProducts indicates an expected call of FetchAllProducts.
func (mr *MockProductsServiceMockRecorder) FetchAllProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProducts", reflect.TypeOf((*MockProductsService)(nil).FetchAllProducts), ctx)
}

// FetchProduct mocks base method.
func (m *MockProductsService) FetchProduct(ctx context.Context, id uuid.UUID) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProduct", ctx, id)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProduct indicates an expected call of FetchProduct.
func (mr *MockProductsServiceMockRecorder) FetchProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProduct", reflect.TypeOf((*MockProductsService)(nil).FetchProduct), ctx, id)
}
